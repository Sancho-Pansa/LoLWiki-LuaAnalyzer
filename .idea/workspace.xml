<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="ea5dd4e1-09d4-48ba-91de-c909c17fe9b1" name="Changes" comment="Simple successful api request from Wiki">
      <change afterPath="$PROJECT_DIR$/src/io/sanchopansa/lolwiki/luaanalyzer/LuaAnalyzer.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/io/sanchopansa/lolwiki/luaanalyzer/LuaFetcher.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/io/sanchopansa/lolwiki/luaanalyzer/LuaFetcher.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/io/sanchopansa/lolwiki/luaanalyzer/MainClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/io/sanchopansa/lolwiki/luaanalyzer/MainClass.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2Pgj5v7rmJAciKkYMmJ66tiB7hu" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Downloaded.Files.Path.Enabled": "false",
    "Repository.Attach.Annotations": "false",
    "Repository.Attach.JavaDocs": "false",
    "Repository.Attach.Sources": "false",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "last.edited.regexp": "{\n    \"parse\": {\n        \"title\": \"Модуль:SkinData\",\n        \"pageid\": 10288,\n        \"wikitext\": \"-- <pre>\\nlocal p = {}\\n\\nlocal lib       = require('Модуль:Feature')\\nlocal color     = require('Модуль:Color')\\nlocal FN        = require('Модуль:Filename')\\nlocal IL        = require('Модуль:ImageLink')\\nlocal rusLib    = require('Модуль:RusLocalization')\\nlocal userError = require('Dev:User error')\\n\\nfunction p.get(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    \\n    local get       = require (\\\"Модуль:SkinData/getter\\\")\\n    local champion  = args[\\\"champion\\\"]  or args[1]\\n    local skin      = args[\\\"skin\\\"]      or args[2] or get.original(champion)\\n    local fieldname = args[\\\"fieldname\\\"] or args[3]\\n    local output    = args[\\\"output\\\"]    or args[4] or nil\\n    local preprocess= args[\\\"preprocess\\\"] == true\\n    \\n    local result\\n    -- Внешние поля\\n    if(fieldname == \\\"championID\\\") then\\n    \\treturn get.championID(champion)\\n    elseif(fieldname == \\\"original\\\") then\\n    \\treturn get.original(champion)\\n    elseif(fieldname == \\\"skins\\\") then\\n    \\tresult = get.skins(champion)\\n    \\tif(output == \\\"csv\\\") then\\n            return lib.tbl_concat{result}\\n        elseif(output == \\\"custom\\\") then \\n            return frame:preprocess(\\n            \\tlib.tbl_concat{\\n        \\t\\t\\tresult, \\n        \\t\\t\\tprepend = args['prepend'],\\n        \\t\\t\\tappend = args['append'],\\n        \\t\\t\\tseparator = args['separator'],\\n        \\t\\t\\tindex = args[\\\"index\\\"]\\n            \\t}\\n            )\\n        elseif(output == \\\"template\\\") then \\n            return frame:preprocess(\\n            \\tlib.tbl_concat{\\n            \\t\\tresult,\\n            \\t\\tprepend = \\\"{{\\\" .. args['t_name'] .. \\\"|\\\", append = \\\"}}\\\",\\n            \\t\\tseparator = args['separator']\\n            \\t}\\n            )\\n        else\\n        \\treturn result\\n        end\\n    end\\n    \\n    if(get.skins(champion)[skin] == nil) then\\n    \\treturn userError(\\n    \\t\\tmw.ustring.format(\\\"Образ %s для чемпиона %s не найден в Модуль:SkinData/data/\\\\\\\"%s (eng)\\\\\\\"\\\", skin, champion, champion),\\n    \\t\\t\\\"SkinData errors\\\"\\n    \\t)\\n    end\\n    \\n    result = get[fieldname](champion, skin)\\n    \\n    if(output ~= nil and type(result) == \\\"table\\\") then\\n        if(output == \\\"csv\\\") then\\n            return lib.tbl_concat{result}\\n        elseif(output == \\\"custom\\\") then \\n        \\tresult = lib.tbl_concat{\\n    \\t\\t\\tresult,\\n    \\t\\t\\tprepend = args['prepend'],\\n    \\t\\t\\tappend = args['append'],\\n    \\t\\t\\tseparator = args['separator'],\\n    \\t\\t\\tindex = args[\\\"index\\\"]\\n    \\t\\t}\\n        \\tif(preprocess) then\\n        \\t\\treturn frame:preprocess(result)\\n        \\telse\\n        \\t\\treturn result\\n        \\tend\\n        elseif output == \\\"template\\\" then \\n            return frame:preprocess(\\n            \\tlib.tbl_concat{\\n            \\t\\tresult, \\n            \\t\\tprepend = \\\"{{\\\" .. args['t_name'] .. \\\"|\\\", append = \\\"}}\\\",\\n            \\t\\tseparator = args['separator']\\n            \\t}\\n            )\\n        end\\n    elseif result == nil then\\n        return \\\"\\\"\\n    else\\n        return result\\n    end\\nend\\n\\n-- Генерирует блок с галереей цветовых схем\\nfunction p.chromagallery(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    \\n    local skinData = p.collectAllSkins()\\n    \\n    local champion = args[\\\"champion\\\"] or args[1]\\n    local skinName = args[\\\"skin\\\"] or args[2] or p.get{champion, fieldname=\\\"original\\\"}\\n    local formattedSkinName = p.get{champion, skinName, \\\"name\\\"}\\n    local currentSkinData = p.get{champion, skinName, \\\"skins\\\"}[skinName]\\n    if(currentSkinData == nil or currentSkinData.chromas == nil) then\\n        return userError(\\n        \\tmw.ustring.format(\\n        \\t\\t\\\"Цветовые схемы для образа %s чемпиона %s не найдены в Модуль:SkinData/data/\\\\\\\"%s (eng)\\\\\\\"\\\",\\n        \\t\\tskinName,\\n        \\t\\tchampion,\\n        \\t\\tchampion\\n        \\t),\\n        \\t\\\"SkinData errors\\\"\\n        )\\n    end\\n    \\n    local currentSkinChromas = currentSkinData.chromas\\n    \\n    local header = \\\"Цветовые схемы\\\"\\n    local frame = mw.getCurrentFrame()\\n    \\n    if(currentSkinData.forms ~= nil) then\\n        header = \\\"Модели\\\"\\n    end\\n    \\n    local chromaTable  = {}\\n    local chromaString = args[\\\"chromas\\\"] or \\\"true\\\"\\n    if(chromaString == \\\"true\\\") then\\n        for chromaname in pairs(currentSkinChromas) do\\n            table.insert(chromaTable, chromaname)\\n        end\\n    else\\n        chromaTable = mw.text.split(chromaString, \\\",\\\")\\n    end\\n    table.sort(chromaTable)\\n    local key        = args[\\\"key\\\"] or \\\"true\\\"\\n    local IMAGE_WIDTH = \\\"100px\\\"\\n    \\n    local chromaExhibition = mw.html.create(\\\"div\\\")\\n    chromaExhibition\\n    \\t:attr(\\\"id\\\", \\\"chromaexhibition\\\")\\n    \\t:css(\\\"position\\\", \\\"relative\\\")\\n    \\t:tag(\\\"span\\\")\\n    \\t\\t:css(\\\"font-weight\\\", \\\"bold\\\")\\n    \\t\\t:wikitext(mw.ustring.format(\\\"%s - %s\\\", formattedSkinName, header))\\n    \\t\\t:done()\\n    \\t:done()\\n    \\n    local glossaryNode = mw.html.create(\\\"div\\\")\\n    if(key == \\\"true\\\" and header == \\\"Цветовые схемы\\\") then\\n    \\tglossaryNode\\n    \\t\\t:attr(\\\"data-param\\\", \\\"Рамки цс\\\")\\n    \\t\\t:addClass(\\\"glossary\\\")\\n    \\t\\t:cssText(\\\"position:absolute; top:5px; right: 5px; z-index:20;\\\")\\n    \\t\\t:wikitext(\\\"[[File:Information.svg|30px|link=]]\\\")\\n    \\t\\t:newline()\\n    \\t\\t:done()\\n    end\\n    \\n    local chromaGalleryNode = mw.html.create(\\\"div\\\")\\n    chromaGalleryNode\\n    \\t:addClass(lib.ternary(#chromaTable > 8, \\\"chroma-gallery-large\\\", \\\"chroma-gallery\\\"))\\n    \\t:cssText(\\\"width:718px; text-align:center;\\\")\\n    \\t:newline()\\n    \\t:tag(\\\"div\\\")\\n    \\t\\t:addClass(\\\"base\\\")\\n\\t\\t\\t:wikitext(mw.ustring.format(\\\"[[File:%s|183px]]\\\", FN.chroma{champion, skinName, \\\"Обычная\\\"}))\\n\\t\\t\\t:done()\\n    \\t:done()\\n\\t\\n\\tfor i, chromaName in pairs(chromaTable) do\\n\\t\\tif(currentSkinChromas[chromaName] == nil) then\\n            return userError(\\n            \\tmw.ustring.format(\\n            \\t\\t\\\"Цветовая схема %s не найдена в Модуль:SkinData/data/\\\\\\\"%s (eng)\\\\\\\" для образа %s чемпиона %s\\\",\\n            \\t\\tchromaName,\\n            \\t\\tchampion,\\n            \\t\\tskinName,\\n            \\t\\tchampion),\\n            \\t\\\"SkinData errors\\\"\\n            )\\n        end\\n        \\n        local availability = currentSkinChromas[chromaName].availability or \\\"Available\\\"\\n        \\n        if(availability ~= \\\"Canceled\\\") then\\n        \\tlocal chromaNode = mw.html.create(\\\"div\\\")\\n        \\tchromaNode\\n        \\t\\t:tag(\\\"div\\\")\\n        \\t\\t\\t:addClass(\\\"chroma\\\")\\n        \\t\\t\\t:addClass(mw.ustring.lower(availability) .. \\\"-border\\\")\\n        \\t\\t\\t:wikitext(mw.ustring.format(\\n        \\t\\t\\t\\t\\\"[[File:%s|%s|border]]\\\", \\n        \\t\\t\\t\\tFN.chroma{champion, skinName, chromaName},\\n        \\t\\t\\t\\tIMAGE_WIDTH)\\n        \\t\\t\\t)\\n        \\t\\t\\t:done()\\n        \\t\\t:tag(\\\"div\\\")\\n        \\t\\t\\t:addClass(\\\"chroma-caption\\\")\\n        \\t\\t\\t:wikitext(chromaName)\\n        \\t\\t\\t:done()\\n        \\t\\t:done()\\n        \\tchromaGalleryNode:node(chromaNode):newline()\\n        end\\n\\tend\\n\\t\\n\\tchromaExhibition\\n\\t\\t:node(glossaryNode)\\n\\t\\t:newline()\\n\\t\\t:node(chromaGalleryNode)\\n\\t\\t:newline()\\n\\t\\t:allDone()\\n\\treturn tostring(chromaExhibition)\\nend\\n\\n-- Создает галерею загрузочных иллюстраций образов чемпиона\\nfunction p.getLoadings(frame)\\n    local function comp(a, b)\\n        local a = a[2].id or -1\\n        local b = b[2].id or -1\\n        if a < b then\\n            return true\\n        end\\n        return false\\n    end\\n    \\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    \\n    local champion = args['champion'] or args[1]\\n    local size = args['size'] or args[2] or '150'\\n    \\n    local skins = skinData[champion].skins\\n    local wrapper = {}\\n    \\n    -- table.sort не умеет сортировать таблицы с нечисловыми индексами, так что костыль\\n    for k, v in pairs(skins) do \\n        table.insert(wrapper, {k, v})\\n    end\\n    \\n    table.sort(wrapper, comp)\\n    local loadings = {}\\n    for i, value in pairs(wrapper) do\\n        table.insert(loadings, mw.ustring.format(\\\"[[File:%s|%spx]]\\\", \\n            tostring(FN.loading{\\n                ['champion'] = champion, \\n                ['skin'] = value[1]\\n            }),\\n            size\\n        ))\\n    end\\n    \\n    return table.concat(loadings, \\\"\\\")\\nend\\n\\n-- Выдает линейку, к которой принадлежит образ (заменить на геттер)\\nfunction p.getSet(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n\\t\\n    local t = skinData[args[1]].skins[args[2] or rusLib.adjustOriginal(args[1])].set\\n    \\n    if t == nil then\\n        return nil\\n    elseif type(t) == 'string' then\\n        return t\\n    end\\n    local s\\n    for i, setname in ipairs(t) do\\n        if i ~= 1 then\\n            s = s .. \\\", \\\" .. setname:gsub(\\\"% \\\", \\\"&nbsp;\\\")\\n        else\\n            s = setname\\n        end\\n    end\\n\\n    return s\\nend\\n\\n-- Выдает список линеек образа (заменить на геттер)\\nfunction p.getSetlist(frame)\\n    local championtable = {}\\n    local sets = {}\\n    local hash = {}\\n    local setList = mw.html.create('ul')\\n    \\n    setList:newline()\\n    \\n    for x in pairs(skinData) do\\n        table.insert(championtable, x)\\n    end\\n    table.sort(championtable)\\n\\n    for _, championname in pairs(championtable) do\\n        local skintable  = {}\\n        for championname in pairs(skinData[championname][\\\"skins\\\"]) do\\n            table.insert(skintable, championname)\\n        end\\n        table.sort(skintable)\\n\\n        for _, skinname in pairs(skintable) do\\n            local t = skinData[championname][\\\"skins\\\"][skinname]\\n            \\n            if t.set ~= nil then\\n                if type(t.set) == \\\"table\\\" then\\n                    for _, value in pairs(t.set) do\\n                        if (not hash[value]) then\\n                            table.insert(sets, value)\\n                            hash[value] = true\\n                        end\\n                    end\\n                else\\n                    if (not hash[t.set]) then\\n                        table.insert(sets, t.set)\\n                        hash[t.set] = true\\n                    end\\n                end\\n            end\\n        end\\n    end\\n    \\n    table.sort(sets)\\n    \\n    for _, setname in pairs(sets) do\\n        setList\\n            :tag('li')\\n                :wikitext('[[' .. setname .. ']]')\\n                :done()\\n            :done()\\n            :newline()\\n    end\\n \\n    return setList\\nend\\n\\nfunction p.getSetskins(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n \\n\\tlocal skinData = collectAllSkins()\\n    local skinList = mw.html.create('ul')\\n    local championtable = {}\\n    local result = false\\n    \\n    skinList:newline()\\n    \\n    for x in pairs(skinData) do\\n        table.insert(championtable, x)\\n    end\\n    table.sort(championtable)\\n \\n    for _, championname in pairs(championtable) do\\n        local skintable  = {}\\n        \\n        for championname in pairs(skinData[championname][\\\"skins\\\"]) do\\n            table.insert(skintable, championname)\\n        end\\n        table.sort(skintable)\\n        \\n        for _, skinname in pairs(skintable) do\\n            local hit = false\\n            local t = skinData[championname][\\\"skins\\\"][skinname]\\n            \\n            if t.set ~= nil then\\n                if type(t.set) == \\\"table\\\" then\\n                    for _, subset in pairs(t.set) do\\n                        if subset == args[1] then\\n                            hit = true\\n                            result = true\\n                        end\\n                    end\\n                else\\n                    if t.set == args[1] then\\n                        hit = true\\n                        result = true\\n                    end\\n                end\\n            end\\n            if hit == true then\\n                skinList\\n                    :tag('li')\\n                        :tag('span')\\n                            :addClass('skin-icon')\\n                            :attr('data-champion', championname)\\n                            :attr('data-skin', skinname)\\n                            :wikitext('[[File:' .. FN.championcircle({championname, skinname}) .. '|20px|link=' .. championname .. ']] [[' .. championname .. '|' .. lib.ternary(t[\\\"formatname\\\"] ~= nil, t[\\\"formatname\\\"], skinname .. \\\" \\\" .. championname) .. ']]')\\n                        :done()\\n                    :done()\\n                    :newline()\\n            end\\n        end\\n    end\\n\\n    if result == false then \\n        skinList\\n            :tag('li')\\n                :wikitext('No match found for ' .. args[1] .. '.')\\n            :done()\\n            :newline()\\n    end\\n \\n    return skinList\\nend\\n\\nfunction p.getChromacount(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    local t = skinData[args[1]].skins[args[2] or rusLib.adjustOriginal(args['champion'] or args[1])].chromas\\n    local s = \\\"\\\"\\n    \\n    local chromatable  = {}\\n    for chromaname in pairs(t) do\\n        table.insert(chromatable, chromaname)\\n    end\\n    \\n    return #chromatable or \\\"N/A\\\"\\nend\\n\\n-- Выдает список названий ЦС (заменить на геттер)\\nfunction p.getChromaNames(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n        \\n    local championName = lib.validateName(args[\\\"champion\\\"] or args[1])\\n    local skinName = args[\\\"skin\\\"] or args[2] or p.get{championName, fieldname=\\\"original\\\"}\\n    \\n    -- Вся информация об хромах\\n    local chromas = p.get{championName, skinName, \\\"chromas\\\"}\\n    if(chromas == \\\"\\\") then\\n    \\treturn \\\"\\\"\\n    end\\n    \\n    local chromaList = {}\\n    for chromaName in lib.pairsByAlphabeticalKeys(chromas) do\\n        table.insert(chromaList, chromaName)\\n    end\\n    \\n    return mw.text.listToText(chromaList, \\\", \\\")\\nend\\n\\n-- Выдает имя формы (заменить на геттер)\\nfunction p.getFormnames(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    local t = skinData[args[1]].skins[args[2] or rusLib.adjustOriginal(args[1])].forms\\n    local s = \\\"\\\"\\n    \\n    local formtable  = {}\\n    for formname in pairs(t) do\\n        table.insert(formtable, formname)\\n    end\\n    table.sort(formtable)\\n\\n    for i, formname in pairs(formtable) do\\n        if i ~= 1 then\\n            s = s  .. \\\", \\\" .. formname\\n        else\\n            s = s .. formname\\n        end\\n    end\\n    \\n    return s\\nend\\n\\n-- Выдает иконку формы (заменить на геттер)\\nfunction p.getFormicon(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n\\n    return skinData[args[1]].skins[args[2] or rusLib.adjustOriginal(args[1])].formicon\\nend\\n\\n-- Создает список всех образов\\n-- Ошибка Lua: not enough memory. ????\\nfunction p.getAllSkinsTable(frame)\\n\\tlocal allSkins = p.collectAllSkins()\\n    local lang = mw.language.new( \\\"ru\\\" )\\n    --local colorModule = require(\\\"Модуль:Color\\\")\\n    \\n    --returns: cssClass (класс CSS), Symbol (значок), Sort Number (порядковый номер)\\n    local function generateAvailabilityBlock(availabilityEnum)\\n    \\tif(availabilityEnum == \\\"Legacy\\\") then\\n    \\t\\treturn \\\"lol-full-skins-table-availability--legacy\\\", \\\"‒\\\", 2\\n    \\telseif(availabilityEnum == \\\"Limited\\\") then\\n    \\t\\treturn \\\"lol-full-skins-table-availability--limited\\\", \\\"✘\\\", 3\\n    \\telseif(availabilityEnum == \\\"Rare\\\") then\\n    \\t\\treturn \\\"lol-full-skins-table-availability--limited\\\", \\\"⭐\\\", 4\\n    \\telseif(availabilityEnum == \\\"Upcoming\\\") then\\n    \\t\\treturn \\\"lol-full-skins-table-availability--upcoming\\\", \\\"⭘\\\", 5\\n    \\telse\\n    \\t\\treturn \\\"lol-full-skins-table-availability--available\\\", \\\"✔\\\", 1\\n    \\tend\\n    end\\n    \\n    local function generateCostBlock(cost)\\n    \\t-- Образы за RP (150000 - Урфвик, 2000 - стандартное кол-во токенов события)\\n    \\tif(type(cost) ~= \\\"number\\\") then\\n    \\t\\treturn \\\"Особая цена\\\", \\\"inherit\\\"\\n    \\telseif(cost >= 260 and cost < 150000 and cost ~= 2000) then\\n    \\t\\treturn cost, \\\"gold\\\"\\n    \\telse\\n    \\t\\t-- Все остальные\\n    \\t\\treturn \\\"Особая цена\\\", \\\"inherit\\\"\\n    \\tend\\n    end\\n    \\n    local function generateMarkCell(skinFlag)\\n    \\tlocal markCell = mw.html.create(\\\"td\\\")\\n    \\tif(skinFlag) then\\n    \\t\\tmarkCell\\n    \\t\\t\\t:addClass(\\\"lol-full-skins-table-green-mark\\\")\\n    \\t\\t\\t:attr(\\\"data-sort-value\\\", 1)\\n    \\t\\t\\t:wikitext(\\\"✔\\\")\\n    \\t\\t\\t:done()\\n\\t\\telse\\n    \\t\\tmarkCell\\n    \\t\\t\\t:addClass(\\\"lol-full-skins-table-green-mark\\\")\\n    \\t\\t\\t:attr(\\\"data-sort-value\\\", 2)\\n    \\t\\t\\t:wikitext(\\\"&nbsp;\\\")\\n    \\t\\t\\t:done()\\n    \\tend\\n    \\treturn markCell\\n    end\\n    \\n    -- Иллюстрации иконок\\n    local ICON_AVAILABILITY = \\\"[[File:Availability.png|20px|link=|]]\\\"\\n    local ICON_RELEASE = \\\"[[File:Release.png|20px|link=|]]\\\"\\n    local ICON_COST = \\\"[[File:RP icon.png|20px|link=|]]\\\"\\n    local ICON_FILTER = \\\"[[File:Voice filter.png|20px|link=|]]\\\"\\n    local ICON_QUOTES = \\\"[[File:Additional quotes.png|20px|link=|]]\\\"\\n    local ICON_NEWVOICE = \\\"[[File:New voice.png|20px|link=|]]\\\"\\n    local ICON_EFFECTS = \\\"[[File:New effects.png|20px|link=|]]\\\"\\n    local ICON_ANIMATIONS = \\\"[[File:New animations.png|20px|link=|]]\\\"\\n    local ICON_TRANSFORM = \\\"[[File:Transforming.png|20px|link=|]]\\\"\\n    local ICON_CHROMA = \\\"[[File:Chromaskins.png|20px|link=|]]\\\"\\n    \\n    -- Блок таблицы и заглавная строка\\n    local skinTableBlock = mw.html.create(\\\"table\\\")\\n    skinTableBlock\\n        :addClass(\\\"sortable article-table lol-full-skins-table\\\")\\n        :newline()\\n        :tag(\\\"tr\\\")\\n            :tag(\\\"th\\\")\\n            \\t:addClass(\\\"lol-full-skins-table--icon-header\\\")\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--name\\\")\\n                :wikitext(\\\"Название\\\")\\n            :done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Доступность\\\")\\n                    :wikitext(ICON_AVAILABILITY)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--date\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"date\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Дата выхода\\\")\\n                    :wikitext(ICON_RELEASE)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Стоимость\\\")\\n                    :wikitext(ICON_COST)\\n\\t                :done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Фильтр голоса\\\")\\n                    :wikitext(ICON_FILTER)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Дополнительные реплики\\\")\\n                    :wikitext(ICON_QUOTES)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Новая озвучка\\\")\\n                    :wikitext(ICON_NEWVOICE)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Новые визуальные и звуковые эффекты\\\")\\n                    :wikitext(ICON_EFFECTS)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Новые анимации\\\")\\n                    :wikitext(ICON_ANIMATIONS)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"title\\\", \\\"Внешний вид меняется по ходу игры или может быть переключен, но не является частью игровой механики\\\")\\n                    :wikitext(ICON_TRANSFORM)\\n                \\t:done()\\n            \\t:done()\\n            :newline()\\n            :tag(\\\"th\\\")\\n                :addClass(\\\"lol-full-skins-table--icon-header\\\")\\n                :attr(\\\"data-sort-type\\\", \\\"number\\\")\\n                :tag(\\\"div\\\")\\n                    :attr(\\\"title\\\", \\\"Цветовые схемы\\\")\\n                    :wikitext(ICON_CHROMA)\\n                \\t:done()\\n            \\t:done()\\n        \\t:done()\\n        :newline()\\n        \\n        -- Основная таблица\\n        for champion, championData in lib.pairsByAlphabeticalKeys(allSkins) do\\n        \\tfor skin, skinData in skinIter(championData[\\\"skins\\\"]) do\\n        \\t\\t-- Общие данные\\n        \\t\\tlocal skinName = p.get{champion, skin, \\\"name\\\"}\\n        \\t\\tlocal skinAvailability = p.get{champion, skin, \\\"availability\\\"}\\n        \\t\\tlocal skinRelease = p.get{champion, skin, \\\"release\\\"}\\n        \\t\\tlocal skinCost = p.get{champion, skin, \\\"cost\\\"}\\n        \\t\\tlocal skinFilter = p.get{champion, skin, \\\"filter\\\"}\\n        \\t\\tlocal skinQuotes = p.get{champion, skin, \\\"newquotes\\\"}\\n        \\t\\tlocal skinNewVoice = p.get{champion, skin, \\\"newvoice\\\"}\\n        \\t\\tlocal skinVisuals = p.get{champion, skin, \\\"neweffects\\\"}\\n        \\t\\tlocal skinAnimations = p.get{champion, skin, \\\"newanimations\\\"}\\n        \\t\\tlocal skinTransform = p.get{champion, skin, \\\"transforming\\\"}\\n        \\t\\tlocal skinChromas = (p.get{champion, skin, \\\"chromas\\\"} ~= \\\"\\\")\\n        \\t\\t\\n        \\t\\t-- Блок с символами доступности\\n        \\t\\tlocal cssClass, availabilityMark, sortNumber = generateAvailabilityBlock(skinData[\\\"availability\\\"])\\n        \\t\\tlocal availabilityCell = mw.html.create(\\\"td\\\")\\n        \\t\\tavailabilityCell\\n        \\t\\t\\t:addClass(cssClass)\\n        \\t\\t\\t:attr(\\\"data-sort-value\\\", sortNumber)\\n        \\t\\t\\t:wikitext(availabilityMark)\\n        \\t\\t\\t:done()\\n        \\t\\t\\n        \\t\\t-- Блок с ценой\\n        \\t\\tlocal costText, costColor = generateCostBlock(skinCost)\\n        \\t\\tlocal costCell = mw.html.create(\\\"td\\\")\\n        \\t\\tcostCell\\n        \\t\\t\\t:css(\\\"color\\\", costColor)\\n        \\t\\t\\t:wikitext(colorText)\\n        \\t\\t\\t:done()\\n        \\t\\t\\n\\t        \\tlocal skinTableRow = mw.html.create(\\\"tr\\\")\\n\\t        \\tskinTableRow\\n\\t        \\t\\t:tag(\\\"td\\\")\\n\\t        \\t\\t\\t:attr(\\\"data-sort-value\\\", champion)\\n\\t        \\t\\t\\t:wikitext(tostring(IL.champion{\\n\\t                        [\\\"champion\\\"] = champion,\\n\\t                        [\\\"skin\\\"] = skinName,\\n\\t                        [\\\"text\\\"] = \\\"*none*\\\",\\n\\t                        [\\\"size\\\"] = \\\"64px\\\",\\n\\t                        [\\\"circle\\\"] = \\\"true\\\"\\n\\t\\t\\t\\t\\t\\t}))\\n\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t:tag(\\\"td\\\")\\n\\t\\t\\t\\t\\t\\t:wikitext(skinName)\\n\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t:tag(\\\"td\\\")\\n\\t\\t\\t\\t\\t\\t:wikitext(lang:formatDate(\\\"d.m.y\\\", skinRelease) or \\\"\\\")\\n\\t\\t\\t\\t\\t:node(availabilityCell)\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(costCellNode)\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinFilter))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinQuotes))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinNewVoice))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinVisuals))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinAnimations))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinTransform))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:node(generateMarkCell(skinChromas))\\n\\t\\t\\t\\t\\t:newline()\\n\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\tskinTableBlock:node(skinTableRow)\\n\\t\\t\\tend\\n        end\\n    return tostring(skinTableBlock)\\nend\\n\\n-- Выдает некоторое количество самых последних образов\\nfunction p.newestSkins(frame)\\n\\tlocal args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n\\t\\n\\tlocal skinCount = tonumber(args[1]) or 6\\n\\tlocal skinData = p.collectAllSkins()\\n\\t-- Линеаризированная таблица-список образов\\n    local skinSequence = {}\\n    for championName, championValue in pairs(skinData) do\\n    \\tlocal championSkins = championValue[\\\"skins\\\"]\\n    \\tlocal VALID_AVAILABILITY = {\\n    \\t\\t[\\\"Available\\\"] = true,\\n    \\t\\t[\\\"Legacy\\\"] = true,\\n    \\t\\t[\\\"Rare\\\"] = true,\\n    \\t\\t[\\\"Limit\\\"] = true,\\n    \\t}\\n    \\tfor skinName, skinValue in pairs(championSkins) do\\n    \\t\\tif(VALID_AVAILABILITY[skinValue.availability] and skinValue.engname ~= \\\"Original\\\") then\\n\\t    \\t\\ttable.insert(skinSequence, {\\n\\t    \\t\\t\\t[\\\"champion\\\"] = championName,\\n\\t    \\t\\t\\t[\\\"skin\\\"] = skinName,\\n\\t    \\t\\t\\t[\\\"release\\\"] = skinValue[\\\"release\\\"],\\n\\t    \\t\\t\\t[\\\"cost\\\"] = skinValue[\\\"cost\\\"]\\n\\t    \\t\\t})\\n\\t    \\tend\\n    \\tend\\n    end\\n    \\n    -- Сравнивает по дате выхода. Если одинаковая, то сортирует по образу, затем по чемпиону\\n    local function compareByRelease(a, b)\\n    \\tif(a[\\\"release\\\"] ~= b[\\\"release\\\"]) then\\n    \\t\\treturn a[\\\"release\\\"] > b[\\\"release\\\"]\\n    \\telseif(a[\\\"skin\\\"] ~= b[\\\"skin\\\"]) then\\n    \\t\\treturn a[\\\"skin\\\"] < b[\\\"skin\\\"]\\n    \\telseif(a[\\\"champion\\\"] ~= b[\\\"champion\\\"]) then\\n    \\t\\treturn a[\\\"champion\\\"] < b[\\\"champion\\\"]\\n    \\t--[[else\\n    \\t\\tlocal costA = a[\\\"cost\\\"]\\n    \\t\\tlocal costB = b[\\\"cost\\\"]\\n    \\t\\tif(tonumber(costA) ~= nil) then\\n    \\t\\t\\tif(tonumber(costB) ~= nil) then\\n    \\t\\t\\t\\treturn costA > tonumber(costB)\\n    \\t\\t\\tend\\n    \\t\\t\\t\\n    \\t\\tend\\n    \\t\\treturn true]]\\n    \\tend\\n\\t\\treturn false\\n    end\\n    table.sort(skinSequence, compareByRelease)\\n    mw.log(skinSequence[1][\\\"champion\\\"] .. \\\" \\\" .. skinSequence[1][\\\"skin\\\"])\\n    \\n    local index = 1\\n    local galleryNode = mw.html.create(\\\"div\\\")\\n    galleryNode\\n    \\t:attr(\\\"id\\\", \\\"newskins\\\")\\n    \\t:addClass(\\\"centered-flex portal__newest-skins-block\\\")\\n    \\t:done()\\n    \\n    repeat\\n    \\tgalleryNode:node(p.skinPortrait{\\n    \\t\\tskinSequence[index][\\\"champion\\\"],\\n    \\t\\tskinSequence[index][\\\"skin\\\"]\\n    \\t}):newline():done()\\n    \\tindex = index + 1\\n    until(index > skinCount)\\n    return frame:preprocess(tostring(galleryNode))\\nend\\n\\nfunction p.skinPortrait(frame)\\n\\tlocal args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n\\tlocal champion = args[\\\"champion\\\"] or args[1]\\n\\tlocal skin = args[\\\"skin\\\"] or args[2]\\n\\tlocal size = args[\\\"size\\\"] or args[3] or \\\"120px\\\"\\n\\tlocal style = args[\\\"style\\\"] or \\\"\\\"\\n\\t\\n\\tlocal currency = \\\"RP\\\"\\n\\tlocal cost = p.get{champion, skin, \\\"cost\\\"}\\n\\tlocal costText = \\\"\\\"\\n\\tif(tonumber(cost) ~= nil) then\\n\\t\\tlocal numericalCost = tonumber(cost)\\n\\t\\tif(numericalCost == 10) then currency = \\\"Gems\\\"\\n\\t\\telseif(numericalCost == 100) then currency = \\\"ОП\\\" end\\n\\telse\\n\\t\\tcurrency = \\\"special\\\"\\n\\tend\\n\\tif(currency == \\\"special\\\") then\\n\\t\\tcostText = \\\"Особая цена\\\"\\n\\telse\\n\\t\\tcostText = mw.ustring.format(\\\"{{%s|%s}}\\\", currency, tostring(cost))\\n\\tend\\n\\t\\n\\tlocal lang = mw.language.new(\\\"ru\\\")\\n\\tlocal releaseDate = lang:formatDate(\\\"j xg\\\", p.get{champion, skin, \\\"release\\\"})\\n\\t\\n\\tlocal portraitNode = mw.html.create(\\\"div\\\")\\n\\tportraitNode\\n\\t\\t:css(\\\"width\\\", size)\\n\\t\\t:cssText(style)\\n\\t\\t:addClass(\\\"skin_portrait skin-icon\\\")\\n\\t\\t:attr(\\\"data-champion\\\", champion)\\n\\t\\t:attr(\\\"data-skin\\\", skin)\\n\\t\\t:wikitext(\\n\\t\\t\\tmw.ustring.format(\\n\\t\\t\\t\\t\\\"[[File:%s|%s|link=%s/Коллекция]]\\\",\\n\\t\\t\\t\\tFN.loading{champion, skin},\\n\\t\\t\\t\\tsize,\\n\\t\\t\\t\\tchampion\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\t:tag(\\\"p\\\")\\n\\t\\t\\t:wikitext(mw.ustring.format(\\\"[[%s/Коллекция|%s]]\\\", champion, p.get{champion, skin, \\\"name\\\"}))\\n\\t\\t\\t:done()\\n\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t:wikitext(costText)\\n\\t\\t\\t:done()\\n\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t:wikitext(releaseDate)\\n\\t\\t\\t:done()\\n\\t\\t:done()\\n\\t\\n\\treturn portraitNode\\nend\\n\\n-- Создает каталог образов по чемпионам\\nfunction p.skinCatalog(frame)\\n\\tlocal skinData      = p.collectAllSkins()\\n    local dlib          = require(\\\"Dev:Datecalc\\\")\\n    local lang          = mw.language.new( \\\"ru\\\" )\\n    local championtable = {}\\n    local skinTableBlock       = mw.html.create('table')\\n    \\n    skinTableBlock\\n        :addClass('sortable article-table novpadding hcpadding sticky-header')\\n        :css('width','100%')\\n        :css('text-align','center')\\n        :css('font-size','12px')\\n        :newline()\\n        :tag('tr')\\n            :tag('th')\\n                :css('font-size','12px')\\n                :css('width','140x')\\n                :wikitext('Чемпион')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('<div title=\\\"Доступны в магазине или через Хекстековое ремесло.\\\">Доступные</div>')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('<div title=\\\"Доступны через Хекстековое ремесло или ограниченные распродажи.\\\">Архивные</div>')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('<div title=\\\"Доступны периодически или могут быть получены при особых условиях.\\\">Редкие</div>')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('Недоступные')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('Всего')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"isoDate\\\")\\n                :wikitext('Последний образ')\\n            :done()\\n            :newline()\\n            :tag('th')\\n                :css('font-size','12px')\\n                :attr('data-sort-type', \\\"number\\\")\\n                :wikitext('Дней назад')\\n            :done()\\n            :newline()\\n        :done()\\n        :newline()\\n    \\n    for x in pairs(skinData) do\\n        table.insert(championtable, x)\\n    end\\n    table.sort(championtable)\\n    \\n    for _, championname in pairs(championtable) do\\n        local t              = skinData[championname][\\\"skins\\\"]\\n        local availablecount = 0\\n\\t    local availablecircles = \\\"\\\"\\n        local legacycount    = 0\\n\\t    local legacycircles = \\\"\\\"\\n        local limitedcount   = 0\\n\\t    local rarecircles = \\\"\\\"\\n        local rarecount   = 0\\n\\t    local limitedcircles = \\\"\\\"\\n        local result         = {\\\"\\\",\\\"\\\",\\\"\\\"}\\n        local sdnode         = mw.html.create('tr')\\n        local border         = \\\"\\\"\\n        local skintable      = {}\\n        \\n        for skinname in pairs(t) do\\n            if (skinname == \\\"Классический\\\"\\n                or\\n                skinname == \\\"Классическая\\\"\\n                or\\n                skinname == \\\"Original\\\"\\n                or\\n                championname == \\\"Акали\\\"      and skinname == \\\"Алая\\\" \\n                or \\n                championname == \\\"Амуму\\\"      and skinname == \\\"Лоскутный хаос\\\"\\n                or\\n                championname == \\\"Блицкранк\\\" and skinname == \\\"Лоскутный хаос\\\"\\n                or\\n                championname == \\\"Райз\\\"       and skinname == \\\"Человек\\\"\\n            ) then\\n                -- skip\\n            else\\n                table.insert(skintable, skinname)\\n            end\\n        end\\n        table.sort(skintable, function(a, b) return t[a].release<t[b].release end)\\n        \\n        for i, skinname in pairs(skintable) do\\n            if i == #skintable then\\n                border = \\\"border-radius:13px; width:26px; height:26px; box-shadow: 0 0 2px 2px #70fff2, 0 0 4px #111;\\\"\\n            end\\n            \\n            if t[skinname].availability == \\\"Available\\\" then\\n                availablecount = availablecount + 1\\n                availablecircles = availablecircles .. '<li class=\\\"skin-icon\\\" data-champion=\\\"' .. championname ..'\\\" data-skin=\\\"' .. skinname .. '\\\" style=\\\"'.. border ..'\\\">[[File:' .. FN.championcircle({championname, skinname}) .. '|26px|link=]]'\\n            end\\n            if t[skinname].availability == \\\"Legacy\\\" then\\n                legacycount    = legacycount    + 1\\n                legacycircles = legacycircles .. '<li class=\\\"skin-icon\\\" data-champion=\\\"' .. championname ..'\\\" data-skin=\\\"' .. skinname .. '\\\" style=\\\"'.. border ..'\\\">[[File:' .. FN.championcircle({championname, skinname}) .. '|26px|link=]]'\\n            end\\n            if t[skinname].availability == \\\"Rare\\\" then\\n                rarecount    = rarecount    + 1\\n                rarecircles = rarecircles .. '<li class=\\\"skin-icon\\\" data-champion=\\\"' .. championname ..'\\\" data-skin=\\\"' .. skinname .. '\\\" style=\\\"'.. border ..'\\\">[[File:' .. FN.championcircle({championname, skinname}) .. '|26px|link=]]'\\n            end\\n            if t[skinname].availability == \\\"Limited\\\" then\\n                limitedcount   = limitedcount   + 1\\n                limitedcircles = limitedcircles .. '<li class=\\\"skin-icon\\\" data-champion=\\\"' .. championname ..'\\\" data-skin=\\\"' .. skinname .. '\\\" style=\\\"'.. border ..'\\\">[[File:' .. FN.championcircle({championname, skinname}) .. '|26px|link=]]'\\n            end\\n            \\n            if t[skinname].release ~= \\\"N/A\\\" then\\n                if t[skinname].release > result[2] then\\n                    result[1] = skinname\\n                    result[2] = t[skinname].release\\n                    result[3] = t[skinname].formatname\\n                end\\n            end\\n        end\\n        \\n        sdnode\\n            :tag('td')\\n                :addClass('skin-icon')\\n                :attr('data-sort-value', championname)\\n                :attr('data-champion', championname)\\n                :attr('data-skin', rusLib.adjustOriginal(championname))\\n                :css('text-align', 'left')\\n                :wikitext('[[File:' .. FN.championcircle({championname, rusLib.adjustOriginal(championname)}) .. '|26px|link=' .. championname .. ']] ' .. championname)\\n            :done()\\n        \\n        -- Available skins\\n        sdnode\\n            :tag('td')\\n                :addClass('icon_list')\\n                :attr('data-sort-value', availablecount)\\n                :css('text-align', 'left')\\n                :css('background-color', '#0a1827')\\n                :wikitext(availablecircles)\\n            :done()\\n            \\n        -- Legacy skins\\n        sdnode\\n            :tag('td')\\n                :addClass('icon_list')\\n                :attr('data-sort-value', legacycount)\\n                :css('text-align', 'left')\\n                :wikitext(legacycircles)\\n            :done()\\n            \\n        -- Rare skins\\n        sdnode\\n            :tag('td')\\n                :addClass('icon_list')\\n                :attr('data-sort-value', rarecount)\\n                :css('text-align', 'left')\\n                :css('background-color', '#0a1827')\\n                :wikitext(rarecircles)\\n            :done()\\n         \\n        -- Limited skins\\n        sdnode\\n            :tag('td')\\n                :addClass('icon_list')\\n                :attr('data-sort-value', limitedcount)\\n                :css('text-align', 'left')\\n                :wikitext(limitedcircles)\\n            :done()   \\n           \\n        -- Total\\n            \\n        sdnode\\n            :tag('td')\\n                :wikitext(availablecount + legacycount + rarecount + limitedcount)\\n            :done()\\n\\n        -- Last Skin\\n        local y, m, d = result[2]:match(\\\"(%d+)-(%d+)-(%d+)\\\")\\n        if y == nil or m == nil or d == nil then\\n            sdnode\\n                :tag('td')\\n                    :addClass('skin-icon')\\n                    :css('white-space', 'nowrap')\\n                    :attr('data-sort-value', result[2])\\n                    :attr('data-champion', championname)\\n                    :attr('data-skin', result[1])\\n                    :wikitext(result[2])\\n                :done()\\n                :tag('td')\\n                    :wikitext(result[2])\\n                :done()\\n        else\\n            sdnode\\n                :tag('td')\\n                    :addClass('skin-icon')\\n                    :css('white-space', 'nowrap')\\n                    :attr('data-sort-value', result[2])\\n                    :attr('data-champion', championname)\\n                    :attr('data-skin', result[1])\\n                    :wikitext(lang:formatDate('d-m-Y', result[2]))\\n                :done()\\n                :tag('td')\\n                    :wikitext(dlib.main{\\\"diff\\\", lang:formatDate('Y-m-d'), result[2]})\\n                :done()\\n        end\\n\\n        -- Add skin row to the table\\n        skinTableBlock\\n            :newline()\\n            :node(sdnode)\\n    end\\n    \\n    return skinTableBlock\\nend\\n\\n-- Задает описание всплывающей подсказки с образом\\nfunction p.skintooltip(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    \\n    local championname = args[\\\"champion\\\"]\\n    local skinname     = args[\\\"skin\\\"] or p.get{championname, \\\"Original\\\", \\\"original\\\"}\\n    local variant      = args[\\\"variant\\\"]\\n    local filename     = FN.skin{championname, skinname, variant}\\n    local formatname   = p.get{championname, skinname, \\\"name\\\"}\\n    local cost         = p.get{championname, skinname, \\\"cost\\\"}\\n    local distribution = p.get{championname, skinname, \\\"distribution\\\"}\\n    local lore         = p.get{championname, skinname, \\\"lore\\\"}\\n    local filter       = p.get{championname, skinname, \\\"filter\\\"}\\n    local newquotes    = p.get{championname, skinname, \\\"newquotes\\\"}\\n    local newvoice     = p.get{championname, skinname, \\\"newvoice\\\"}\\n    local neweffects   = p.get{championname, skinname, \\\"neweffects\\\"}\\n    local newrecall    = p.get{championname, skinname, \\\"newrecall\\\"}\\n    local newanimations= p.get{championname, skinname, \\\"newanimations\\\"}\\n    local transforming = p.get{championname, skinname, \\\"transforming\\\"}\\n    local extras       = p.get{championname, skinname, \\\"extras\\\"}\\n    local chromas      = p.get{championname, skinname, \\\"chromas\\\"}\\n    local variantof    = p.get{championname, skinname, \\\"variant\\\"}\\n    local voiceactor   = p.get{\\n    \\tchampionname, \\n    \\tskinname, \\n    \\t\\\"voiceactor\\\", \\n    \\toutput = \\\"custom\\\",\\n    \\tseparator = \\\",&nbsp;\\\", \\n    \\tpreprocess = false\\n    }\\n    local splashartist = p.get{\\n    \\tchampionname, \\n    \\tskinname, \\n    \\t\\\"splashartist\\\", \\n    \\toutput = \\\"custom\\\",\\n    \\tseparator = \\\",&nbsp;\\\", \\n    \\tpreprocess = false\\n    }\\n    local set = p.get{\\n    \\tchampionname, \\n    \\tskinname, \\n    \\t\\\"set\\\", \\n    \\toutput = \\\"custom\\\",\\n    \\tseparator = \\\",&nbsp;\\\", \\n    \\tpreprocess = false\\n    }\\n    \\n    local ACTOR_ICON = \\\"[[File:Actor.png|20px|link=]]\\\"\\n    local ARTIST_ICON = \\\"[[File:Artist.png|20px|link=]]\\\"\\n    local SET_ICON = \\\"[[File:Set piece.png|20px|link=]]\\\"\\n    \\n    -- Заголовок подписи\\n    local nameText = formatname\\n    if(variant ~= nil) then\\n    \\tnameText = nameText .. mw.ustring.format(\\\"&nbsp;<small>(%s)</small>\\\", variant)\\n    end\\n    \\n    local costText = \\\"\\\"\\n    if(type(cost) ~= \\\"number\\\") then\\n    \\tcostText = \\\"Особая цена\\\"\\n    elseif(cost == 10) then\\n    \\tcostText = \\\"[[Файл:ME icon.png|20px|link=Самоцвет]] 10\\\"\\n    elseif(cost == 100) then\\n    \\tcostText = \\\"[[Файл:Hextech Crafting Prestige token.png|20px|link=Очки престижа|alt=ОП]] 100\\\"\\n    elseif(cost == 150000) then\\n    \\tcostText = \\\"Ограниченное издание ([[Файл:BE icon.png|20px|link=Синяя эссенция]] 150000)\\\"\\n    else\\n    \\tcostText = \\\"[[File:RP icon.png|20px|link=RP|alt=RP]] \\\" .. cost\\n    end\\n    \\n    local skinFeaturesHeader = mw.html.create(\\\"div\\\")\\n    skinFeaturesHeader\\n    \\t:addClass(\\\"lol-skin-banner-features-header\\\")\\n    \\t:tag(\\\"span\\\")\\n    \\t\\t:addClass(\\\"lol-skin-banner-features-header__name\\\")\\n    \\t\\t:wikitext(formatname)\\n    \\t\\t:done()\\n    \\t:tag(\\\"span\\\")\\n    \\t\\t:wikitext(\\\"&nbsp; – \\\")\\n    \\t\\t:done()\\n    \\t:tag(\\\"span\\\")\\n    \\t\\t:addClass(\\\"lol-skin-banner-features-header__cost\\\")\\n    \\t\\t:wikitext(costText)\\n    \\t\\t:done()\\n    \\t:newline()\\n    \\t:done()\\n    \\n    -- Озвучивание, художники и вселенная\\n    local skinFeaturesCreators = mw.html.create(\\\"div\\\")\\n    skinFeaturesCreators:addClass(\\\"lol-skin-banner-features-creators\\\")\\n    if(voiceactor ~= \\\"\\\") then\\n    \\tskinFeaturesCreators\\n\\t    \\t:tag(\\\"div\\\")\\n\\t    \\t\\t:wikitext(ACTOR_ICON .. voiceactor)\\n\\t    \\t\\t:done()\\n\\t    \\t:newline()\\n\\t    \\t:done()\\n    end\\n    if(splashartist ~= \\\"\\\") then\\n    \\tskinFeaturesCreators\\n\\t    \\t:tag(\\\"div\\\")\\n\\t    \\t\\t:wikitext(ARTIST_ICON .. splashartist)\\n\\t    \\t\\t:done()\\n\\t    \\t:newline()\\n    \\t\\t:done()\\n    end\\n    if(set ~= \\\"\\\") then\\n\\t    skinFeaturesCreators\\n\\t    \\t:tag(\\\"div\\\")\\n\\t    \\t\\t:wikitext(SET_ICON .. set)\\n\\t    \\t\\t:done()\\n\\t    \\t:newline()\\n    \\t\\t:done()\\n    end\\n    \\n    local tooltipBlock = mw.html.create(\\\"div\\\")\\n    tooltipBlock\\n    \\t:addClass(\\\"lol-skin-banner-image\\\")\\n    \\t:wikitext(mw.ustring.format(\\\"[[Файл:%s|700px]]\\\", filename))\\n    \\t:tag(\\\"div\\\")\\n    \\t\\t:addClass(\\\"lol-skin-banner-features\\\")\\n    \\t\\t:node(skinFeaturesHeader)\\n    \\t\\t:node(skinFeaturesCreators)\\n    \\t\\t:tag(\\\"div\\\")\\n    \\t\\t\\t:addClass(\\\"lol-skin-banner-features-lore\\\")\\n    \\t\\t\\t:wikitext(lore)\\n    \\t\\t\\t:done()\\n    \\t\\t:done()\\n    \\t:done()\\n    \\n    return tostring(tooltipBlock)\\nend\\n\\n-- Создает таблицу актеров озвучки чемпионов\\nfunction p.getVoiceActorRoster()\\n\\tlocal skinData = p.collectAllSkins()\\n\\tlocal deceased = mw.loadData(\\\"Модуль:SkinData/deceased\\\")\\n\\tlocal DECEASED_MARK = \\\"&nbsp;&#8224;\\\"\\n\\t\\n\\tlocal function concatenateActorList(actorList)\\n\\t\\tlocal result = \\\"\\\"\\n\\t\\tfor i, actorName in ipairs(actorList) do\\n        \\tresult = result .. actorName\\n        \\tif(lib.find(deceased, actorName) ~= -1) then\\n        \\t\\tresult = result .. DECEASED_MARK\\n        \\tend\\n        \\tif(i < #actorList) then\\n        \\t\\tresult = result .. \\\", \\\"\\n        \\tend\\n\\t\\tend\\n    \\treturn result\\n\\tend\\n\\t\\n    local tableNode = mw.html.create(\\\"table\\\")\\n    tableNode\\n        :addClass(\\\"sortable article-table lol-voiceactors-table\\\")\\n        :newline()\\n        :tag(\\\"tr\\\")\\n            :tag(\\\"th\\\")\\n            \\t:addClass(\\\"lol-voiceactors-table__champion\\\")\\n                :wikitext(\\\"Чемпион\\\")\\n                :done()\\n            :tag(\\\"th\\\")\\n            \\t:addClass(\\\"lol-voiceactors-table__voice\\\")\\n                :wikitext(\\\"Актер дубляжа\\\")\\n                :done()\\n            :done()\\n        :newline()\\n    \\n    for champion, v in lib.pairsByAlphabeticalKeys(skinData) do\\n    \\tlocal original = _getSkinById(champion, 0) -- Образ с ID = 0 и есть Классический\\n        local defaultActorList = lib.cloneTable(v[\\\"skins\\\"][original][\\\"voiceactor\\\"])\\n        local formattedDefaultActor = \\\"\\\"\\n        \\n        if(defaultActorList ~= nil) then\\n            formattedDefaultActor = concatenateActorList(defaultActorList)\\n        else\\n        \\tformattedDefaultActor = \\\"Неизвестный актер озвучки\\\"\\n        end\\n        \\n        -- Формируем строку таблицы\\n        local rowNode = mw.html.create(\\\"tr\\\")\\n        rowNode\\n            :tag(\\\"td\\\")\\n            \\t:addClass(\\\"lol-voiceactors-table__champion\\\")\\n                :attr(\\\"data-sort-value\\\", champion)\\n                :wikitext(tostring(IL.champion{\\n                    [\\\"champion\\\"] = champion,\\n                    [\\\"skin\\\"] = original,\\n                    [\\\"circle\\\"] = \\\"true\\\",\\n                    [\\\"link\\\"] = champion .. \\\"/LoL/Фразы\\\"\\n                }))\\n            :done()\\n            :tag(\\\"td\\\")\\n            \\t:addClass(\\\"lol-voiceactors-table__voice\\\")\\n                :wikitext(formattedDefaultActor)\\n                :done()\\n            :newline()\\n        \\n        tableNode:node(rowNode):newline()\\n        \\n        for skinName, skinValue in pairs(v[\\\"skins\\\"]) do\\n            if(skinValue[\\\"voiceactor\\\"] ~= nil) then\\n            \\tlocal currentActorList = lib.cloneTable(skinValue[\\\"voiceactor\\\"])\\n            \\tlocal formattedCurrentActor = concatenateActorList(currentActorList)\\n                if(lib.tbl_concat{currentActorList} ~= lib.tbl_concat{defaultActorList}) then\\n                    local skinNode = mw.html.create(\\\"tr\\\")\\n                    skinNode\\n                        :tag(\\\"td\\\")\\n            \\t\\t\\t\\t:addClass(\\\"lol-voiceactors-table__champion\\\")\\n                            :attr(\\\"data-sort-value\\\", champion)\\n                            :wikitext(tostring(IL.champion{\\n                                [\\\"champion\\\"] = champion,\\n                                [\\\"skin\\\"] = skinName,\\n                                [\\\"text\\\"] = p.get{champion, skinName, \\\"name\\\"},\\n                                [\\\"circle\\\"] = \\\"true\\\",\\n                    \\t\\t\\t[\\\"link\\\"] = champion .. \\\"/LoL/Фразы\\\"\\n                                }))\\n                            :done()\\n                        :tag(\\\"td\\\")\\n            \\t\\t\\t\\t:addClass(\\\"lol-voiceactors-table__voice\\\")\\n                            :wikitext(formattedCurrentActor)\\n                            :done()\\n                        :newline()\\n                    tableNode:node(skinNode):newline()\\n                end\\n            end\\n        end\\n    end\\n    \\n    return tostring(tableNode)\\nend\\n\\n-- Выводит стилизованную галерею образов чемпионов с меню выбора текущего образа для просмотра\\n-- Автор оригинала: de:Benutzer:TheTimebreaker (редактор немецкой Вики по League of Legends)\\nfunction p.skinSlider(frame)\\n    local args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n    \\n    local championData = require(\\\"Модуль:ChampionData\\\")\\n    local lang = mw.language.new(\\\"ru\\\")\\n    \\n    local championName = lib.validateName(args[\\\"champion\\\"] or args[1] or mw.title.getCurrentTitle().rootText)\\n    \\n    local t = p.get{championName, \\\"Original\\\" , \\\"skins\\\"}\\n    local apiName = championData.get{championName, \\\"apiname\\\"}\\n    local engName = championData.get{championName, \\\"engname\\\"}\\n    local futureSkins = {}\\n    \\n    local skinSliderContainer = mw.html.create(\\\"div\\\"):addClass(\\\"lazyimg-wrapper\\\")\\n    \\n    local navigationBlock = mw.html.create(\\\"div\\\")\\n        :addClass(\\\"lol-skinslider-navigation\\\")\\n        :addClass(\\\"hidden\\\")\\n        :done()\\n        \\n    local sliderTabBlock = mw.html.create(\\\"div\\\")\\n    sliderTabBlock\\n    \\t:addClass(\\\"skinviewer-tab-container\\\")\\n    \\t:addClass(\\\"lol-skinslider-slider\\\")\\n    \\t:done()\\n    \\n    for k, v, i in skinIter(t) do\\n    \\tlocal skinFullName = p.get{championName, k, \\\"name\\\"}\\n        local releaseDate = \\\"\\\"\\n        if(v[\\\"release\\\"] == \\\"N/A\\\") then \\n        \\treleaseDate = v[\\\"release\\\"]\\n        else \\n        \\treleaseDate = lang:formatDate(\\\"d-m-Y\\\", v[\\\"release\\\"])\\n        end\\n        \\n        local costText = \\\"\\\"\\n        local priceTitle = \\\"\\\"\\n        if(type(v[\\\"cost\\\"]) ~= \\\"number\\\") then\\n        \\tcostText = \\\"Особая цена\\\"\\n        \\tpriceTitle = v['distribution'] and v['distribution'] or \\\"Этот образ нельзя приобрести за игровую валюту\\\"\\n        elseif(v[\\\"cost\\\"] == 10) then\\n        \\tcostText = \\\"[[Файл:ME icon.png|20px|link=Самоцвет]] 10\\\"\\n            priceTitle = \\\"Этот образ можно приобрести в системе Хекстекового ремесла.\\\"\\n        elseif(v[\\\"cost\\\"] == 100) then\\n        \\tcostText = \\\"[[Файл:Hextech Crafting Prestige token.png|20px|link=Очки престижа|alt=ОП]] 100\\\"\\n            priceTitle = \\\"Этот образ можно купить за Очки престижа в системе Хекстекового ремесла.\\\"\\n        elseif(v[\\\"cost\\\"] == 150000) then\\n        \\tcostText = \\\"Ограниченное издание ([[Файл:BE icon.png|20px|link=Синяя эссенция]] 150000)\\\"\\n            priceTitle = \\\"Этот образ можно было приобрести во время особенного события.\\\"\\n        else\\n        \\tcostText = \\\"[[File:RP icon.png|20px|link=RP|alt=RP]] \\\" .. v[\\\"cost\\\"]\\n            priceTitle = \\\"Этот образ можно купить за RP по обычным правилам.\\\"\\n        end\\n        \\n        if(v[\\\"availability\\\"] == \\\"Upcoming\\\") then\\n            table.insert(futureSkins, {k, v, i})\\n        else\\n        \\tlocal chromaBlockText = v[\\\"chromas\\\"] and \\\"[[File:Chromaskins.png|x60px||link=]]\\\" or \\\"\\\"\\n        \\tlocal skinIcon = mw.ustring.format(\\\"[[Файл:%s||link=|x56px]]\\\", FN.championcircle({ championName, k }))\\n        \\t\\n        \\t-- Переключатель образов (ряд круглых иконок)\\n            navigationBlock\\n                :tag(\\\"span\\\")\\n                    :attr(\\\"id\\\", i)\\n                    :addClass(\\\"show\\\")\\n                    :addClass(\\\"lol-skinslider-navigation__chroma-icon\\\")\\n                    :wikitext(chromaBlockText)\\n                    :tag(\\\"span\\\")\\n                        :attr(\\\"title\\\", skinFullName)\\n                    \\t:addClass(\\\"lol-skinslider-navigation__skin-icon\\\")\\n                        :wikitext(skinIcon)\\n                        :done()\\n                    :done()\\n                :done()\\n            \\n            -- Изображение\\n            local skinImageBlock = mw.html.create(\\\"div\\\")\\n            skinImageBlock\\n            \\t:addClass(\\\"lol-skinslider-skin__image\\\")\\n            \\t:wikitext(mw.ustring.format(\\\"[[Файл:%s||link=|]]\\\", FN.skin({ championName, k })))\\n            \\t:done()\\n            \\n            -- Цена образа\\n            local priceBlock = mw.html.create(\\\"div\\\")\\n\\t        priceBlock\\n\\t        \\t:addClass(\\\"lol-skinslider-skin__price\\\")\\n\\t        \\t:attr(\\\"title\\\", priceTitle)\\n\\t        \\t:wikitext(costText)\\n\\t        \\t:done()\\n            \\n            -- Кнопка \\\"Посмотреть в 3D\\\"\\n            local skinCaptionBlock3DLink = mw.html.create(\\\"div\\\")\\n            local linkButton = mw.html.create(\\\"span\\\")\\n            linkButton\\n            \\t:attr(\\\"title\\\", \\\"Посмотреть модель\\\")\\n            \\t:addClass(\\\"button-gold\\\")\\n            \\t:wikitext(\\\"'''3D модель'''\\\")\\n            \\t:done()\\n            \\n            local teemoLink = mw.ustring.format(\\n            \\t\\\"[https://teemo.gg/model-viewer?game=league-of-legends&type=champions&object=%s&skinid=%s-%s %s]\\\",\\n            \\tapiName,\\n            \\tstring.lower(apiName),\\n            \\ti - 1,\\n            \\ttostring(linkButton)\\n            )\\n            skinCaptionBlock3DLink\\n            \\t:addClass(\\\"lol-skinslider-skin__caption__3dbutton\\\")\\n            \\t:tag(\\\"span\\\")\\n            \\t\\t:addClass(\\\"plainlinks\\\")\\n            \\t\\t:wikitext(teemoLink)\\n            \\t\\t:done()\\n            \\t:done()\\n            \\n            -- Название образа в центре подписи\\n            local skinCaptionBlockText = mw.html.create(\\\"div\\\")\\n            skinCaptionBlockText\\n            \\t:addClass(\\\"lol-skinslider-skin__caption__text\\\")\\n            \\t:wikitext(skinFullName)\\n            \\t:done()\\n            \\n            -- Дата выхода образа\\n            local skinCaptionBlockRelease = mw.html.create(\\\"div\\\")\\n            skinCaptionBlockRelease\\n            \\t:addClass(\\\"lol-skinslider-skin__caption__release\\\")\\n            \\t:wikitext(releaseDate)\\n            \\t:done()\\n            \\n            -- Блок подписи - сборка компонентов\\n            local skinCaptionBlock = mw.html.create(\\\"div\\\")\\n            skinCaptionBlock\\n            \\t:addClass(\\\"lol-skinslider-skin__caption\\\")\\n            \\t:node(skinCaptionBlock3DLink)\\n            \\t:node(skinCaptionBlockText)\\n            \\t:node(skinCaptionBlockRelease)\\n            \\n            -- Блок информации\\n            -- Блок информации - лорное описание\\n            local skinInfoLore = mw.html.create(\\\"div\\\")\\n            local skinInfoLoreText = \\\"\\\"\\n            if(v[\\\"lore\\\"]) then\\n            \\tskinInfoLoreText = v[\\\"lore\\\"]\\n            end\\n            skinInfoLore\\n            \\t:addClass(\\\"lol-skinslider-info__lore\\\")\\n            \\t:wikitext(skinInfoLoreText)\\n            \\t:done()\\n            \\n            -- Блок информации - малые иконки\\n            local voiceActors = v[\\\"voiceactor\\\"] -- table\\n            local voiceActorText = \\\"Неизвестный актер озвучки\\\"\\n            if(voiceActors ~= nil) then\\n\\t            voiceActorText = \\\"[[File:Actor.png|20px|link=]]\\\" .. lib.tbl_concat{\\n\\t            \\tvoiceActors,\\n\\t            \\t[\\\"prepend\\\"] = \\\"[[Актеры озвучивания|\\\",\\n\\t            \\t[\\\"append\\\"] = \\\"]]\\\",\\n\\t            \\t[\\\"separator\\\"] = \\\",&nbsp;\\\"\\n\\t            }\\n\\t        end\\n            \\n            local splashArtists = v[\\\"splashartist\\\"] -- table\\n            local splashArtistText = \\\"\\\"\\n            if(splashArtists ~= nil) then\\n\\t            splashArtistText = \\\"[[File:Artist.png|20px|link=]]\\\" .. lib.tbl_concat{\\n\\t            \\tsplashArtists,\\n\\t            \\t[\\\"separator\\\"] = \\\",&nbsp;\\\"\\n\\t            }\\n\\t        end\\n            \\n            local sets = v[\\\"set\\\"] -- table\\n            local setText = \\\"\\\"\\n            if(sets ~= nil) then\\n            \\tsetText = \\\"[[File:Set piece.png|20px|link=]][[\\\" .. sets[1] .. \\\"]]\\\"\\n            end\\n            \\n            local isLootEligible = v[\\\"looteligible\\\"] -- boolean\\n            local lootText = \\\"\\\"\\n            if(isLootEligible == false) then\\n            \\tlootText = \\\"[[File:Loot ineligible.png|20px|link=]] Не выпадает из сундуков\\\"\\n            else\\n            \\tlootText = \\\"[[File:Loot eligible.png|20px|link=]] [[Хекстековое ремесло|Выпадает из Хекстекового сундука]]\\\"\\n            end\\n            \\n            local skinInfoSmallIcons = mw.html.create(\\\"div\\\")\\n            skinInfoSmallIcons\\n            \\t:addClass(\\\"lol-skinslider-info__small-icons\\\")\\n            \\t:addClass(\\\"hideHyperlinkColor\\\")\\n            \\t:tag(\\\"div\\\")\\n            \\t\\t:wikitext(voiceActorText)\\n            \\t\\t:done()\\n            \\t:tag(\\\"div\\\")\\n            \\t\\t:wikitext(splashArtistText)\\n            \\t\\t:done()\\n            \\t:tag(\\\"div\\\")\\n            \\t\\t:wikitext(setText)\\n            \\t\\t:done()\\n            \\t:tag(\\\"div\\\")\\n            \\t\\t:wikitext(lootText)\\n            \\t\\t:done()\\n            \\t:done()\\n            \\n            \\n            -- Блок информации - крупные иконки\\n            local skinInfoLargeIcons = mw.html.create(\\\"div\\\")\\n            skinInfoLargeIcons\\n            \\t:addClass(\\\"lol-skinslider-info__large-icons\\\")\\n            \\t:done()\\n            \\n            -- Функция для генерации большой иконки и подписи под ней\\n            local function generateLargeIcon(imageLink, imageCaption)\\n            \\tlocal largeIconNode = mw.html.create(\\\"div\\\")\\n            \\tlargeIconNode\\n\\t            \\t:addClass(\\\"lol-skinslider-info__large-icons__element\\\")\\n            \\t\\t\\t:tag(\\\"div\\\")\\n            \\t\\t\\t\\t:wikitext(imageLink)\\n            \\t\\t\\t\\t:done()\\n            \\t\\t\\t:tag(\\\"div\\\")\\n            \\t\\t\\t\\t:wikitext(imageCaption)\\n            \\t\\t\\t\\t:done()\\n            \\t\\t\\t:done()\\n            \\t\\t:done()\\n\\t            return largeIconNode\\t\\n            end\\n            \\n            if(v[\\\"availability\\\"] == \\\"Legacy\\\") then\\n            \\tlocal availabilityNode = generateLargeIcon(\\n            \\t\\t\\\"[[File:Limited skin.png|50px|link=]]\\\",\\n            \\t\\t\\\"Архив\\\"\\n            \\t)\\n            \\tskinInfoLargeIcons:node(availabilityNode)\\n            elseif(v[\\\"availability\\\"] == \\\"Limited\\\") then\\n            \\tlocal availabilityNode = generateLargeIcon(\\n            \\t\\t\\\"[[File:Limited skin.png|50px|link=]]\\\",\\n            \\t\\t\\\"Ограниченное издание\\\"\\n            \\t)\\n            \\tskinInfoLargeIcons:node(availabilityNode)\\n            end\\n            if(v[\\\"filter\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:Voice filter.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Фильтр голоса\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"newquotes\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:Additional quotes.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Дополнительные фразы\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"newvoice\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:New voice.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Новая озвучка\\\"\\n            \\t\\t))\\n            end\\n            \\n            if(v[\\\"neweffects\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:New effects.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Новые эффекты\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"newanimations\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:New animations.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Новые анимации\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"transforming\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:Transforming.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Несколько форм\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"extras\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:Includes extras.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Дополнительные материалы\\\"\\n            \\t\\t))\\n            end\\n            if(v[\\\"chromas\\\"] ~= nil) then\\n            \\tskinInfoLargeIcons\\n            \\t\\t:node(generateLargeIcon(\\n\\t            \\t\\t\\\"[[File:Chromas available.png|50px|link=]]\\\",\\n\\t            \\t\\t\\\"Цв. схемы\\\"\\n            \\t\\t))\\n            end\\n            \\n            local skinInfoBlock = mw.html.create(\\\"div\\\")\\n            skinInfoBlock\\n            \\t:addClass(\\\"lol-skinslider-info\\\")\\n            \\t:node(skinInfoLore)\\n            \\t:node(skinInfoSmallIcons)\\n            \\t:node(skinInfoLargeIcons)\\n            \\t:done()\\n            \\n            -- Блок информации - текст про вариацию образа (если есть)\\n            if(v[\\\"variant\\\"] ~= nil) then\\n            \\tlocal skinInfoVariantOf = mw.html.create(\\\"div\\\")\\n            \\tlocal variantOfText = \\\"Этот образ является вариацией образа \\\" .. tostring(IL.skin{\\n            \\t\\t\\tchampion = championName,\\n            \\t\\t\\tskin = _getSkinById(championName, v[\\\"variant\\\"]),\\n            \\t\\t\\tcircle = \\\"true\\\",\\n            \\t\\t\\tlink = '*none*',\\n            \\t\\t\\tengname = engName\\n            \\t\\t})\\n            \\tskinInfoVariantOf\\n            \\t\\t:addClass(\\\"lol-skinslider-info__variant-of\\\")\\n            \\t\\t:wikitext(variantOfText)\\n            \\t\\t:done()\\n            \\t\\n            \\tskinInfoBlock\\n            \\t\\t:node(skinInfoVariantOf)\\n            \\t\\t:done()\\n            end\\n            \\n            -- Блок изображения образа с названием и ценой\\n            local sliderSkinBlock = mw.html.create(\\\"div\\\")\\n            sliderSkinBlock\\n            \\t:addClass(\\\"skinviewer-tab-skin\\\")\\n            \\t:addClass(\\\"lol-skinslider-skin\\\")\\n                :node(skinImageBlock)\\n                :node(priceBlock)\\n                :node(skinCaptionBlock)\\n                :done()\\n            \\n            -- Блок с цветовыми схемами\\n            local sliderChromasBlock = mw.html.create(\\\"div\\\")\\n            sliderChromasBlock\\n            \\t:addClass(\\\"lol-skinslider-chromas\\\")\\n            \\t:wikitext(v[\\\"chromas\\\"] and p.chromagallery{championName, k} or \\\"\\\")\\n\\t\\t\\t\\t:done()\\n\\t\\t\\t\\n\\t\\t\\t-- Блок с дополнительными иллюстрациями\\n\\t\\t\\tlocal sliderGalleryBlock = mw.html.create(\\\"div\\\")\\n\\t\\t\\tsliderGalleryBlock\\n\\t\\t\\t\\t:tag(\\\"span\\\")\\n\\t\\t    \\t\\t:css(\\\"font-weight\\\", \\\"bold\\\")\\n\\t\\t    \\t\\t:wikitext(mw.ustring.format(\\\"Форматы образа\\\"))\\n\\t\\t    \\t\\t:done()\\n\\t\\t    \\t:tag(\\\"div\\\") -- Вложенный div нужен, чтобы span-заголовок не попадал в flex-box\\n\\t\\t\\t\\t\\t:addClass(\\\"lol-skinslider-gallery\\\")\\n\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t:addClass(\\\"lol-skinslider-gallery__centered\\\")\\n\\t\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t\\t:wikitext(mw.ustring.format(\\\"[[Файл:%s]]\\\", FN.centered{ championName, k }))\\n\\t\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t\\t:addClass(\\\"lol-skinslider-gallery__caption\\\")\\n\\t\\t\\t\\t\\t\\t\\t:wikitext(\\\"Центрированный\\\")\\n\\t\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t:addClass(\\\"lol-skinslider-gallery__loading\\\")\\n\\t\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t\\t:wikitext(mw.ustring.format(\\\"[[Файл:%s]]\\\", FN.loading{ championName, k }))\\n\\t\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t\\t:tag(\\\"div\\\")\\n\\t\\t\\t\\t\\t\\t\\t:addClass(\\\"lol-skinslider-gallery__caption\\\")\\n\\t\\t\\t\\t\\t\\t\\t:wikitext(\\\"Экран загрузки\\\")\\n\\t\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t\\t\\t:done()\\n\\t\\t\\t\\t:done()\\n            \\n            -- Блок одного слайда образа (со всей информацией)\\n            local sliderElementBlock = mw.html.create(\\\"div\\\")\\n            sliderElementBlock\\n                :addClass(\\\"skinviewer-tab-content\\\")\\n                :addClass(i == 1 and \\\"skinviewer-active-tab\\\" or \\\"\\\")\\n                :attr(\\\"id\\\", \\\"item-\\\" .. i)\\n                :css(\\\"display\\\", i ~= 1 and \\\"none\\\" or \\\"block\\\")\\n                :node(sliderSkinBlock)\\n                :node(skinInfoBlock)\\n                :node(sliderGalleryBlock)\\n                :node(sliderChromasBlock)\\n            \\t:done()\\n            \\n            sliderTabBlock\\n                :node(sliderElementBlock)\\n                :done()\\n        end\\n    end\\n    \\n    local resultContainer = skinSliderContainer:node(navigationBlock):node(sliderTabBlock)\\n    \\n    if(#futureSkins > 0) then\\n        local futureSkinsNode = mw.html.create('div')\\n        futureSkinsNode\\n            :tag('h2')\\n                :wikitext('Будущие')\\n                :done()\\n            :done()\\n        \\n        for i, fskin in ipairs(futureSkins) do\\n            local imageNode = mw.html.create('div')\\n            imageNode\\n                :cssText('display:inline-block; margin:5px; width:342px')\\n                :wikitext(mw.ustring.format(\\n                    \\\"[[File:%s|340px|border]]\\\",\\n                    FN.skin{championName, fskin[1]}\\n                    ))\\n                :tag('div')\\n                    :cssText('text-align:center; font-size:90%;')\\n                    :wikitext(p.get{championName, fskin[1], \\\"name\\\"})\\n                :done()\\n            futureSkinsNode\\n                :node(imageNode)\\n                :tag('div')\\n                    :addClass('skinviewer-tab-chroma')\\n                    :wikitext(fskin[2]['chromas'] and p.chromagallery{championName, fskin[1]} or '')\\n                    :done()\\n                :done()\\n        end\\n        \\n        resultContainer:node(futureSkinsNode)\\n    end\\n    \\n    return resultContainer\\nend\\n\\n-- Генерирует стандартную надпись на странице озвучки чемпиона по указанному имени чемпиона\\nfunction p.getSkinQuotesCaption(frame)\\n\\tlocal args; if frame.args == nil then args = lib.arguments(frame) else args = lib.arguments(frame.args) end\\n\\t\\n\\tlocal champion = args[\\\"champion\\\"] or args[1]\\n    local append = args[\\\"append\\\"] or\\n        \\\"Указанные образы обладают дополнительными звуковыми эффектами: наложенными фильтрами или новыми репликами, - но в общем случае используют озвучку Классического образа.\\\"\\n\\tif(champion == nil) then\\n\\t\\treturn userError(\\\"Чемпион не найден\\\", \\\"SkinData errors\\\")\\n\\tend\\n\\t\\n\\tlocal engnames = mw.loadData(\\\"Модуль:ChampionData/engnames\\\")\\n\\tlocal championEngname = engnames[champion]\\n\\tif(championEngname == nil) then\\n\\t\\treturn userError(\\\"Чемпион \\\" .. champion .. \\\" не указан в Модуль:ChampionData/engnames\\\", \\\"SkinData errors\\\")\\n\\tend\\n\\tlocal skinData = mw.loadData(\\\"Модуль:SkinData/data/\\\" .. championEngname)\\n\\tlocal championData = skinData[champion]\\n    if(championData == nil) then\\n        return userError(\\\"Чемпион \\\" .. \\\" не найден в Модуль:SkinData/data\\\", \\\"SkinData errors\\\")\\n    end\\n\\n    local filteredSkins = {}\\n\\n    for k, v in skinIter(championData[\\\"skins\\\"]) do\\n        repeat\\n            if(v.newvoice == true) then break end\\n            if(v.filter or v.newquotes --[[or v.neweffects--]] or (v.id == 0)) then \\n                table.insert(filteredSkins, k)\\n            end\\n            break\\n        until true\\n    end\\n\\n    local blockNode = mw.html.create(\\\"div\\\")\\n    blockNode\\n        :addClass(\\\"lol-quotes-caption\\\")\\n        :tag(\\\"div\\\")\\n            :addClass(\\\"lol-quotes-caption-prepended-text\\\")\\n            :wikitext(\\\"Условные обозначения\\\")\\n            :done()\\n        :newline()\\n        :done()\\n\\n    for i, v in ipairs(filteredSkins) do\\n        local flexNode = mw.html.create(\\\"div\\\")\\n        flexNode\\n            :addClass(\\\"lol-quotes-caption-node\\\")\\n            :wikitext(tostring(IL.skin{\\n                [\\\"champion\\\"] = champion,\\n                [\\\"engname\\\"] = championEngname,\\n                [\\\"skin\\\"] = v,\\n                [\\\"circle\\\"] = \\\"true\\\",\\n                [\\\"link\\\"] = champion .. \\\"/LoL/Фразы\\\",\\n                [\\\"text\\\"] = v,\\n                [\\\"size\\\"] = \\\"36px\\\"\\n            }))\\n            :done()\\n        :newline()\\n        blockNode:node(flexNode)\\n    end\\n\\n    blockNode\\n        :tag(\\\"div\\\")\\n            :addClass(\\\"lol-quotes-caption-appended-text\\\")\\n            :wikitext(append)\\n            :done()        \\n        :done()\\n    \\n    return tostring(blockNode)\\nend\\n\\n-- Input: \\\"skins\\\" Tabelle eines Champs in Modul:SkinData/data\\n-- Output: Iterator über nach Skin-ID sortierte Tabelle mit 3 nutzbaren return values:\\n    -- k, v, i -> Key, Value -> Iterationszähler i -> Bsp Ahri: Standard Ahri   table   1\\n        -- table ist die Tabelle aus \\\"skins\\\" hinter dem Key [\\\"Standard Ahri\\\"]\\n    -- Nutzungsmögl.: for k, v, i in skinIter(t) - for k, v in skinIter(t) - for k in skinIter(t)\\n    -- entfernte skins werden aktuell übersprungen (sollte vllt an und ausschaltbar sein)\\nfunction skinIter(t)\\n    local keys = {}\\n    for k in pairs(t) do\\n        if t[k]['id'] ~= nil then\\n            keys[#keys+1] = k\\n        end\\n    end\\n\\n    table.sort(keys, function(a,b) return t[a]['id'] < t[b]['id'] end)\\n\\n    -- return the iterator function\\n    local i = 0\\n    return function()\\n        i = i + 1\\n        if keys[i] then\\n            return keys[i], t[keys[i]], i\\n        end\\n    end\\nend\\n\\n-- Замена шаблону SkinPortrait\\nfunction _skinPortrait(champion, skin, text, cost, currency, release)\\n    local portraitBlock = mw.html.create('div')\\n    portraitBlock\\n        :addClass('skin_portrait skin-icon')\\n        :css('width', '120px')\\n        :attr('data-champion', champion)\\n        :attr('data-skin', skin)\\n        :wikitext(mw.ustring.format(\\n            '[[Файл:%s|120px|link=%s/Коллекция]]', \\n            tostring(FN.loading{\\n                ['champion'] = champion, \\n                ['skin'] = skin\\n            }), champion))\\n        :tag('div')\\n            :wikitext(mw.ustring.format('[[%s/Коллекция|%s]]', champion, text))\\n            :done()\\n        :tag('div')\\n            :wikitext(lib.ternary(currency == 'none', 'Особая цена', mw.ustring.format('{{%s|%s}}', currency, cost)))\\n            :done()\\n        :tag('div')\\n            :tag('span')\\n                :addClass('date')\\n                :wikitext(release)\\n                :done()\\n            :done()\\n        :done()\\n    \\n    return tostring(portraitBlock)\\nend\\n\\n-- Генерирует список цветовых схем, которые могут получить участники Партнерской программы\\nfunction p.chromapartner(frame)\\n    local s = ''\\n    \\n    s = s .. '<div id=\\\"chromaexhibition\\\" style=\\\"position:relative\\\">'\\n    s = s .. '<b>Эксклюзивные цветовые схемы</b>'\\n    s = s .. '<div class=\\\"chroma-gallery\\\" style=\\\"width:718px; text-align:center\\\">'\\n    \\n    local championtable = {}\\n    for x in pairs(skinData) do\\n        table.insert(championtable, x)\\n    end\\n    table.sort(championtable)\\n    \\n    local resulttable = {}\\n    for _, championname in pairs(championtable) do\\n        local skintable  = {}\\n        for championname in pairs(skinData[championname][\\\"skins\\\"]) do\\n            table.insert(skintable, championname)\\n        end\\n        table.sort(skintable)\\n \\n        for _, skinname in pairs(skintable) do\\n            local chromatable = {}\\n            local t           = skinData[championname][\\\"skins\\\"][skinname]\\n            local formatname  = t.formatname\\n            \\n            if t.chromas ~= nil then\\n                t = t.chromas\\n                for chromaname in pairs(t) do\\n                    if t[chromaname].distribution == \\\"Partner Program\\\" then\\n                        s = s .. '<div class=\\\"skin-icon\\\" data-game=\\\"lol\\\" data-champion=\\\"' .. championname .. '\\\" data-skin=\\\"' .. skinname .. '\\\"><div class=\\\"chroma partner-border\\\">[[File:' .. FN.chroma({championname, skinname, chromaname}) .. '|100px|border|link=]]</div> <div class=\\\"chroma-caption\\\">[[File:' .. FN.championcircle({championname, skinname}) .. '|20px|link=' .. championname .. ']] [[' .. championname .. '|' .. lib.ternary(formatname, formatname, skinname .. ' ' .. championname) .. ']]</div></div>'\\n                    end\\n                    \\n                end\\n            end\\n        end\\n    end\\n    s = s .. '</div>'\\n    \\n    return s\\nend\\n\\n-- Данная функция собирает в одну таблицу все данные по образам чемпионов\\n-- Для вызова всех модулей ей необходимо получить список чемпионов на английском языке\\nfunction p.collectAllSkins()\\n\\tlocal skinData = {}\\n\\t-- Список имён чемпионов\\n\\tlocal champions = mw.loadData(\\\"Модуль:ChampionData/engnames\\\")\\n\\tfor k, v in lib.pairsByAlphabeticalKeys(champions) do\\n\\t\\tlocal data = mw.loadData(\\\"Модуль:SkinData/data/\\\" .. v)\\n\\t\\tskinData[k] = data[k]\\n\\tend\\n\\t\\n\\treturn skinData\\nend\\n\\n-- Возвращает образ чемпиона по его ID\\nfunction _getSkinById(championName, skinId)\\n    local getter = require(\\\"Модуль:SkinData/getter\\\")\\n    return getter.skinById(championName, skinId)\\nend\\n\\nreturn p\\n\\n-- </pre>\\n-- [[Category:Lua]]\"\n    }\n}",
    "last_directory_selection": "C:/Users/v.zuev/IdeaProjects/LoLWiki-LuaAnalyzer/test",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.2"
  }
}]]></component>
  <component name="RunManager" selected="JUnit.Full Test">
    <configuration name="MainClass" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="io.sanchopansa.lolwiki.luaanalyzer.MainClass" />
      <module name="LoLWiki-LuaAnalyzer" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Full Test" type="JUnit" factoryName="JUnit">
      <module name="LoLWiki-LuaAnalyzer" />
      <option name="PACKAGE_NAME" value="io.sanchopansa.lolwiki.luaanalyzer.test" />
      <option name="MAIN_CLASS_NAME" value="io.sanchopansa.lolwiki.luaanalyzer.test.TestLuaAnalyzer" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.MainClass" />
      <item itemvalue="JUnit.Full Test" />
    </list>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ea5dd4e1-09d4-48ba-91de-c909c17fe9b1" name="Changes" comment="" />
      <created>1683885440694</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1683885440694</updated>
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <created>1683889680879</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1683889680879</updated>
    </task>
    <task id="LOCAL-00002" summary="Simple successful api request from Wiki">
      <created>1683892113159</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1683892113159</updated>
    </task>
    <option name="localTasksCounter" value="3" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Simple successful api request from Wiki" />
    <option name="LAST_COMMIT_MESSAGE" value="Simple successful api request from Wiki" />
  </component>
</project>